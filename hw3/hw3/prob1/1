#include <pthread.h>
#include <stdlib.h>
#include <stdio.h>
#include <unistd.h>

#define NUM_THREADS 10

pthread_mutex_t lock_x;
double shared_x;

typedef struct _thread_data_t{
	int tid;
	double stuff;
} thread_data_t;

void *thr_func(void * arg){
	thread_data_t* data = (thread_data_t*) arg;
	printf("Hello from thr_func, thread id: %d\n", data->tid);
	pthread_mutex_lock(&lock_x);
		shared_x += 1;
		printf("x = %f\n", shared_x);
	pthread_mutex_unlock(&lock_x);
	sleep(1);
	pthread_exit(NULL);
}

int main(){
	
	pthread_t thr[NUM_THREADS];
	int i, rc;

	shared_x = 0;
	pthread_mutex_init(&lock_x, NULL);

	thread_data_t thr_data[NUM_THREADS];
	for (i = 0; i < NUM_THREADS; ++i){
		thr_data[i].tid = i;
		thr_data[i].stuff = (i+1)*NUM_THREADS;
		if ( (rc = pthread_create(&thr[i], NULL, thr_func, &thr_data[i])) ){
			fprintf(stderr, "error: pthread_create, rc: %d\n",rc);
			return EXIT_FAILURE;
			
		} 
	}
	for (i = 0; i < NUM_THREADS; ++i){
		pthread_join(thr[i], NULL);
	//	printf("%d\n",pthread_join(thr[i],NULL) );
	}
	return EXIT_SUCCESS;
}
